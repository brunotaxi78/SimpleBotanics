// <auto-generated />
using System;
using ClassLib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ClassLib.Migrations
{
    [DbContext(typeof(Data.AppContext))]
    [Migration("20210124110902_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ClassLib.Models.BillingAddress", b =>
                {
                    b.Property<int>("BillingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BillingAddresses");
                });

            modelBuilder.Entity("ClassLib.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubCategory")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Desktops",
                            SubCategory = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Laptops",
                            SubCategory = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Smatphones",
                            SubCategory = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Monitors",
                            SubCategory = 0
                        });
                });

            modelBuilder.Entity("ClassLib.Models.CreditCard", b =>
                {
                    b.Property<int>("CreditCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityNumber")
                        .HasColumnType("int");

                    b.HasKey("CreditCardId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("ClassLib.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ClassLib.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Freight")
                        .HasColumnType("float");

                    b.Property<int?>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Orderdate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<double>("SalesTax")
                        .HasColumnType("float");

                    b.Property<int?>("ShipAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("ShipAddressId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ClassLib.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ClassLib.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Ranking")
                        .HasColumnType("float");

                    b.Property<int>("SKU")
                        .HasColumnType("int");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<double>("Stock")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            Color = "",
                            Description = "Windows 10 Pro - Intel I9-10980HK - 32Gb Ram - RTX 2080 Super - 2 TB SSD",
                            Name = "Asus ROG Zephyrus",
                            Picture = "./images/prod_1.jpg",
                            Price = 4999m,
                            Ranking = 1.0,
                            SKU = 111111111,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            Color = "",
                            Description = "Windows 10 Home - Intel I7-9750H - 8 Gb Ram - GTX 1660Ti - 512 Gb SSD",
                            Name = "Acer Predator Helio 300",
                            Picture = "./images/prod_2.jpg",
                            Price = 1349m,
                            Ranking = 1.0,
                            SKU = 222222222,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Color = "",
                            Description = "Windows 10 Pro - Intel I7-8700 - 16 Gb Ram - RTX 2070 - 1Tb + 256 Gb SSD",
                            Name = "Acer Predator Orion 5000",
                            Picture = "./images/prod_3.jpg",
                            Price = 2399m,
                            Ranking = 1.0,
                            SKU = 333333333,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Color = "",
                            Description = "Windows 10 Pro - AMD Ryzen 5-2600 - 32 Gb Ram - GTX 1070 - 3TB + 240 SSD",
                            Name = "Vibox Purity 6",
                            Picture = "./images/prod_4.jpg",
                            Price = 2920m,
                            Ranking = 1.0,
                            SKU = 444444444,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            Color = "",
                            Description = "LED 35\" Curvo - Tempo Resposta 2ms - Taxa Act. 200Hz",
                            Name = "AOC Gaming AG353",
                            Picture = "./images/prod_5.jpg",
                            Price = 2750m,
                            Ranking = 1.0,
                            SKU = 555555555,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            Color = "",
                            Description = "QLED 37,5\" Curvo - Tempo Resposta 1ms - Taxa Atualização 175Hz",
                            Name = "AOC Gaming AG353",
                            Picture = "./images/prod_6.jpg",
                            Price = 2400m,
                            Ranking = 1.0,
                            SKU = 666666666,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 4,
                            Color = "",
                            Description = "Android 10 - 6,8\" - 16Gb Ram - 512 Gb - Câmara 108.0 MP",
                            Name = "Samsung Galaxy S21 Ultra",
                            Picture = "./images/prod_7.jpg",
                            Price = 1460m,
                            Ranking = 1.0,
                            SKU = 777777777,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 4,
                            Color = "",
                            Description = "iOS - 5,8\" - 8 Gb Ram - 512 Gb - Câmara 12.0 MP",
                            Name = "Apple Iphone 11 Pro",
                            Picture = "./images/prod_8.jpg",
                            Price = 1399m,
                            Ranking = 1.0,
                            SKU = 888888888,
                            Size = 0.0,
                            Stock = 10.0
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4,
                            Color = "",
                            Description = "Android 10 - 6,53\" - 8 Gb Ram - 256 Gb - Câmara 40.0 MP",
                            Name = "Huawei Mate 30 Pro",
                            Picture = "./images/prod_9.jpg",
                            Price = 649m,
                            Ranking = 1.0,
                            SKU = 999999999,
                            Size = 0.0,
                            Stock = 10.0
                        });
                });

            modelBuilder.Entity("ClassLib.Models.ProductSupplier", b =>
                {
                    b.Property<int>("ProductSupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.HasKey("ProductSupplierID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductsSuppliers");
                });

            modelBuilder.Entity("ClassLib.Models.ShipAddress", b =>
                {
                    b.Property<int>("ShipAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShipAddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShipAddresses");
                });

            modelBuilder.Entity("ClassLib.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ClassLib.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ClassLib.Models.BillingAddress", b =>
                {
                    b.HasOne("ClassLib.Models.Customer", "Customer")
                        .WithMany("BillingAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ClassLib.Models.CreditCard", b =>
                {
                    b.HasOne("ClassLib.Models.Customer", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ClassLib.Models.Order", b =>
                {
                    b.HasOne("ClassLib.Models.BillingAddress", "BillingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("ClassLib.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ClassLib.Models.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId");

                    b.HasOne("ClassLib.Models.ShipAddress", "ShipAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShipAddressId");

                    b.HasOne("ClassLib.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId");

                    b.Navigation("BillingAddress");

                    b.Navigation("Customer");

                    b.Navigation("OrderDetail");

                    b.Navigation("ShipAddress");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ClassLib.Models.Product", b =>
                {
                    b.HasOne("ClassLib.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ClassLib.Models.ProductSupplier", b =>
                {
                    b.HasOne("ClassLib.Models.Product", "Product")
                        .WithMany("ProductsSuppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassLib.Models.Supplier", "Supplier")
                        .WithMany("ProductsSuppliers")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ClassLib.Models.ShipAddress", b =>
                {
                    b.HasOne("ClassLib.Models.Customer", "Customer")
                        .WithMany("ShipAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ClassLib.Models.BillingAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ClassLib.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ClassLib.Models.Customer", b =>
                {
                    b.Navigation("BillingAddresses");

                    b.Navigation("CreditCards");

                    b.Navigation("Orders");

                    b.Navigation("ShipAddresses");
                });

            modelBuilder.Entity("ClassLib.Models.Product", b =>
                {
                    b.Navigation("ProductsSuppliers");
                });

            modelBuilder.Entity("ClassLib.Models.ShipAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ClassLib.Models.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ClassLib.Models.Supplier", b =>
                {
                    b.Navigation("ProductsSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
